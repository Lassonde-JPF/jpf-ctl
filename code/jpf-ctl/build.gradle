/*
 * This build script generates the antlr source files used for development / runtime. 
 *
 * @author Matt Walker
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    // Apply the antlr plugin to add support for ANTLR4
    id 'antlr'
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()
}

// find home directory
ext.userHome = System.getProperty("user.home")

// find JPF's site.properties
Properties siteProperties = new Properties()
try {
    FileInputStream file = new FileInputStream("${userHome}/.jpf/site.properties")
    siteProperties.load(file)
    file.close()
} catch (FileNotFoundException ignored) {
    throw new GradleException("Please install jpf-core first and add the property 'jpf-core' to ${userHome}/.jpf pointing to the jpf-core installation")
}

// find jpf-core
ext.jpfCoreExists = false
ext.jpfCore = siteProperties.getProperty("jpf-core")
if (jpfCore != null) {
    jpfCore = jpfCore.replace('${user.home}', userHome)
    jpfCoreExists = new File(jpfCore).exists()
}
if (!jpfCoreExists) {
    throw new GradleException("${userHome}/.jpf/site.properties points to the jpf-core installation at ${jpfCore} but that directory does not exist")
}

// find jpf-label
ext.jpfLabelExists = false
ext.jpfLabel = siteProperties.getProperty("jpf-label")
if (jpfLabel != null) {
    jpfLabel = jpfLabel.replace('${user.home}', userHome)
    jpfLabelExists = new File(jpfLabel).exists()
}
if (!jpfLabelExists) {
    throw new GradleException("${userHome}/.jpf/site.properties points to the jpf-label installation at ${jpfLabel} but that directory does not exist")
}

// find jpf-nhandler -> just warn for now
ext.jpfNHandlerExists = false
ext.jpfNHandler = siteProperties.getProperty("jpf-nhandler")
if (jpfNHandler != null) {
    jpfNHandler = jpfNHandler.replace('${user.home}', userHome)
    jpfNHandlerExists = new File(jpfNHandler).exists()
}
if (!jpfNHandlerExists) {
    logger.warn("${userHome}/.jpf/site.properties points to the jpf-nhandler installation at ${jpfNHandler} but that directory does not exist")
}

dependencies {

    // Use JUnit test framework
	testImplementation(platform('org.junit:junit-bom:5.7.2'))
	testImplementation('org.junit.jupiter:junit-jupiter')
	
	//JPF implementation files
    implementation files("${jpfLabel}/build/jpf-label.jar", "${jpfCore}/build/jpf.jar" )
	
    // use ANTLR version 4
    antlr "org.antlr:antlr4:4.9.2" 
    
    // Input parsing
    compile 'commons-cli:commons-cli:1.5.0'
    
    compile 'me.tongfei:progressbar:0.9.2'
}

generateGrammarSource {
    
    arguments += ["-visitor"]
    
}

task fatJar(type: Jar) {
  manifest {
    attributes 'Main-Class': 'cmd.Main'
  }
  archiveClassifier = "all"
  from {
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
  with jar
}

test {
    useJUnitPlatform()
    
    testLogging {
        events "passed", "skipped", "failed"
    }
    
    afterSuite { testDescriptor, result ->
        if (!testDescriptor.parent) {
            println "Test Execution: ${result.resultType}"

            def summaryFields = ["${result.testCount} tests",
                                 "${result.successfulTestCount} passed",
                                 "${result.failedTestCount} failed",
                                 "${result.skippedTestCount} skipped"]

            println ("Summary: " + summaryFields.join(", "))
        }
    }
}

// TODO probably should include .lab, .tra, etc.
clean.doFirst {
    delete "${rootDir}/logs"
    delete "${rootDir}/counterExamples"
}